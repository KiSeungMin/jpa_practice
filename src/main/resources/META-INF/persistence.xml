<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">

    <!--
    JPA 구동 방식

    1. META-INF/persistence.xml의 설정 정보를 조회한다.

    2. 조회한 정보를 바탕으로 EntityManagerFactory를 생성한다.

    3. 필요할 때마다 EntityManager를 생성한다.

    -->
    <!-- 데이터베이스 이름-->
    <persistence-unit name="hello">
        <properties>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:tcp://localhost/~/test"/>

            <!-- value에서 dialect.Mysqldialect를 선택하면 mysql 전용으로 바뀐다.-->
            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>

            <!-- 옵션 -->

            <!-- 쿼리를 콘솔에 출력해줌-->
            <property name="hibernate.show_sql" value="true"/>
            <!-- 쿼리를 예쁘게 출력해줌-->
            <property name="hibernate.format_sql" value="true"/>
            <!-- 쿼리가 어떻게 생성되었는지 출력해줌-->
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.jdbc.batch_size" value="10"/>
            <!--
            value = create -> 기존에 있던 테이블을 지우고 새로 생성 (DROP + CREATE) (개발 초기)
            value = create-drop -> 종료시점에 테이블을 DROP
            value = update -> 변경분만 반영 (운영 DB 에서는 사용하면 안됨) (개발 초기 or 테스트 서버)
            value = validate -> 엔티티와 테이블이 정상 매핑되었는지만 확인 (테스트 서버 or 운영 서버)
            value = none -> 사용하지 않음

            * 운영 장비에는 절대 create, create-drop, update를 사용하면 안된다.
            -->
            <property name="hibernate.hbm2ddl.auto" value="create"/>
        </properties>
    </persistence-unit>
</persistence>